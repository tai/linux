#ifndef __CNC1800_AUDIO_H__
#define __CNC1800_AUDIO_H__

#ifdef __cplusplus
extern "C" {
#endif

#define AUDIO_MAJOR 400

#if (CONFIG_CELESTIAL_MEM_SIZE == 128) // setting to 128MB of Memory size
#define AUDIO_CHANNEL_NUM 1
#else
#define AUDIO_CHANNEL_NUM 4
#endif

#if 0
#define AUDIO_CAB_REGION	AUDIO_STUFF_REGION
#define AUDIO_CAB_SIZE	(0x18000* AUDIO_CHANNEL_NUM)
#define AUDIO_PTS_REGION	(AUDIO_CAB_REGION + AUDIO_CAB_SIZE)
#define AUDIO_PTS_SIZE	(0x3000* AUDIO_CHANNEL_NUM)
#define AUDIO_MIX_REGION	(AUDIO_PTS_REGION + AUDIO_PTS_SIZE)
#define AUDIO_MIX_SIZE	(0x40000)
#endif
#define AUDIO_INS_REGION	AUDIO_STUFF_REGION
#define AUDIO_INS_SIZE (0xf0000)
#define AUDIO_DATA_REGION	(AUDIO_INS_REGION + AUDIO_INS_SIZE)
#define AUDIO_DATA_SIZE	(0x100000)
#define AUDIO_HOST_FW_IF_REGION	(AUDIO_DATA_REGION + AUDIO_DATA_SIZE)
#define AUDIO_HOST_FW_IF_SIZE	(0x400+0x200) /* AUDIO_HOST_FW_IF_SIZE + AUDIO pointer*/

#if 0
#define AUDIO_CAB_OFFSET	(AUDIO_CAB_REGION - AUDIO_STUFF_REGION)
#define AUDIO_PTS_OFFSET	(AUDIO_PTS_REGION - AUDIO_STUFF_REGION)
#define AUDIO_MIX_OFFSET	(AUDIO_MIX_REGION - AUDIO_STUFF_REGION)
#endif
#define AUDIO_INS_OFFSET	(AUDIO_INS_REGION - AUDIO_STUFF_REGION)
#define AUDIO_DATA_OFFSET	(AUDIO_DATA_REGION - AUDIO_STUFF_REGION)
#define AUDIO_HOST_FW_IF_OFFSET	(AUDIO_HOST_FW_IF_REGION - AUDIO_STUFF_REGION)

#define CSAUD_IOC_GET_AUDIO_REG_ADDR	_IOW('a', 0x01, int)
#define CSAUD_IOC_GET_AUDIO_REG_SIZE		_IOW('a', 0x02, int)
#define CSAUD_IOC_GET_AUDIO_CAB_ADDR	_IOW('a', 0x03, int)
#define CSAUD_IOC_GET_AUDIO_CAB_SIZE		_IOW('a', 0x04, int)
#define CSAUD_IOC_GET_AUDIO_HOST_IF_ADDR	_IOW('a', 0x05, int)
#define CSAUD_IOC_GET_AUDIO_HOST_IF_SIZE		_IOW('a', 0x06, int)
#define CSAUD_IOC_GET_AUDIO_MIXER_ADDR	_IOW('a', 0x07, int)
#define CSAUD_IOC_GET_AUDIO_MIXER_IF_SIZE	_IOW('a', 0x08, int)
#define CSAUD_IOC_GET_AUDIO_INS_ADDR		_IOW('a', 0x09, int)
#define CSAUD_IOC_SET_SAMPLE_RATE	_IOW('a', 0x0a, int)
#define CSAUD_IOC_GET_AUDIO_PTS_ADDR	_IOW('a', 0x0b, int)
#define CSAUD_IOC_GET_AUDIO_PTS_SIZE		_IOW('a', 0x0c, int)

#define CSAUD_IOC_GET_XPORT_AUDIO	_IOW('a', 0x0d, int)
#define CSAUD_IOC_GET_IRQ_TYPE		_IOW('a', 0x0e, int)
#define CSAUD_IOC_GET_SAMPLE_RATE		_IOW('a', 0x0f, int)

#define CSAUD_IOC_GET_AUDIO_NUM		_IOW('a', 0x10, int)
#define CSAUD_IOC_ENA_AUDIO_DAC     _IOW('a', 0x12, int)
#define CSAUD_IOC_DIS_AUDIO_DAC     _IOW('a', 0x13, int)

typedef enum{
	AUDIO_TYPE_MPA = 0,
	AUDIO_TYPE_AC3 = 1,
	AUDIO_TYPE_DTS = 2,
	AUDIO_TYPE_LPCM = 3,
	AUDIO_TYPE_AAC_ADTS = 4,
	AUDIO_TYPE_AAC_LATM = 5,
	AUDIO_TYPE_AIB = 6,
	AUDIO_TYPE_UNKNOWN = 7,  // 5 bit
}AUDIO_TYPE_e;

typedef enum _AUDIO_CLOCK_MODE_
{
	_AUDIO_192KHz       =0,
	_AUDIO_96KHz 		=1,
	_AUDIO_88_2KHz		=2,
	_AUDIO_64KHz		=3,
	_AUDIO_44_1KHz		=4,
	_AUDIO_48KHz		=5,
	_AUDIO_32KHz		=6,
	_AUDIO_24KHz		=7,
	_AUDIO_22_05KHz		=8,
	_AUDIO_16KHz		=9,
	_AUDIO_12KHz		=10,
	_AUDIO_11_025KHz	=11,
	_AUDIO_8KHz			=12,
}AUDIO_CLOCK_MODE;

typedef enum _POWER_MODE_
{
	_clock_sleep =0,
	_clock_wake  =1,
}POWER_MODE;

typedef enum
{
	AUD_DAC_TYPE_RIGHT = 0,
	AUD_DAC_TYPE_LEFT  = 1
}CSAUD_DAC_TYPE;

#ifdef __cplusplus
}
#endif

#endif
